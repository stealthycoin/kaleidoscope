def tabify(string, tabs):
    """Adds tabs before string"""
    return ("    " * tabs) + string + "\n"


def generatePage(app, name, path, properties):
    """
    Generate a page given a dict of properties
    
    A page consists of both a view and a template both are generated by this function.
    """

    #basics for each page
    tabs = 0
    page = "<!-- Generated code for page: " + name + " -->\n" 
    page += tabify("{% extends \"base.html\" %}", tabs)

    
    #Pages with non standard-title
    try:
        page += tabify(("{%% block title %%}%s{%% endblock %%}" % properties["title"]), tabs)
    except KeyError:
        pass #no title for page


    with open(path+"/templates/"+name+".html", "w") as f:
        f.write(page)
        
    tabs = 0
    #write view
    view = tabify("def %s(request):" % name, tabs)
    tabs += 1
    view += tabify("return render(request,\"%s.html\",{})" % name, tabs)
    with open(path+"/views.py", "a") as f:
        f.write("\n\n" + view)


    #return a mapping from the url to the view
    return "    url(r'^%s/$', '%s.views.%s', name='%s')," % (properties["url"],app,name,name)
    
    
def createURLs(urls, properties):
    """Takes the urls mappings and build the urls file"""
    pass

    
def createPages(path,properties):
    """Iterate through and create pages"""
    #url mappings variable
    urls = []

    #start with main app
    mainPath = path+"/"+properties["website"]["name"]+"/main/"

    try:
        for page in iter(properties["pages"]):
            urls.append(generatePage("main", page, mainPath, properties["pages"][page]))
    except KeyError:
        print "No web pages to write"

    #create urls file
    content = ""
    with open(path+"/"+properties["website"]["name"]+"/"+properties["website"]["name"]+"/urls.py", "r") as f:
        content = f.read().split("\n")

    mark = 1
    for line in content:
        if line.startswith("urlpatterns"):
            break
        mark += 1
    content = content[0:mark] + urls + content[mark:]
            
    with open(path+"/"+properties["website"]["name"]+"/"+properties["website"]["name"]+"/urls.py", "w") as f:
        f.write("\n".join(content))

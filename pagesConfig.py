import sys, os, consts
from menu import Menu, MenuItem
from utilities import decodeRelationalVariable, tabify, writeFile, addURL, handlePercentToken


def generateHeader(standard, properties):
    """Takes the standard file and adds a header to it"""
    try:
        return "%s\n<a href=\"/\"><h1>%s</h1></a>\n" % (standard, properties["website"]["prettyName"])
    except KeyError:
        return standard

def generateMenu(standard, properties):
    """Generates the menu for a given page"""
    #Checks for menu presence
    try:
        properties["menu"]
    except KeyError:
        print "No menu"
        return

    menu = Menu()
    for item in properties["menu"]:
        menu.addItem(MenuItem(properties["menu"][item]))
        
    menu.sortItems()
    return standard + menu.show()

def generateFooter(standard,properties):
    """Generate footer"""
    try:
        owner = properties["website"]["author"]
    except KeyError:
        owner = properties["website"]["name"]

    from datetime import date
    return "%s&copy; %d %s" % (standard, date.today().year, owner)

def generatePage(app, name, appPath, properties):
    """
    Generate a page given a dict of properties
    
    A page consists of both a view and a template both are generated by this function.
    """

    #basics for each page
    tabs = 0
    page = "<!-- Generated code for page: " + name + " -->\n" 
    page += tabify("{% extends \"standard.html\" %}", tabs)

    
    #Generate unique portion for each page
    try:
        page += tabify(("{%% block title %%}%s{%% endblock %%}" % properties["title"]), tabs)
    except KeyError:
        pass #no title for page


    try:

        page += "{% block content %}" + handlePercentToken(properties["template"],'{{ ','|safe }}') + "{% endblock %}"
    except KeyError:
        print "Page " + name + " has no content"


    with open(os.path.join(appPath, 'templates', name+'.html'), 'w') as f:
        f.write(page)
        
    tabs = 0
    #write view
    #urls need to count capture groups
    args = "request"
    counter = 1
    for symbol in properties["url"]:
        if symbol == "(": #assume matching for now
            args += ",u_" + str(counter)
            counter += 1
    
    view = tabify("def %s(%s):" % (name, args), tabs)
    tabs += 1

    #time to define relational variables given by the ks file
    view += tabify("d = {}",tabs) #to hold the variables
    for key in iter(properties):
        if key not in ["title", "url", "template"]: #predefined keys, anything else is a variable
            view += decodeRelationalVariable(key,properties[key],tabs)

    view += tabify("return render(request,\"%s.html\",d)" % name, tabs)
    
    #write the view files
    writeFile(os.path.join(appPath, 'views.py'), "from django.shortcuts import render\nfrom django.template.loader import render_to_string\n\n" + view, 'a')

    
    #adds a url mapping
    addURL(properties['url'],"%s.views.%s" % (app, name), name)
    
def createPages(properties):
    """Iterate through and create pages"""
    #read standard.html file
    standard = """{% extends "base.html" %}

<!-- Body -->
{% block body %}


<!-- Header -->
<div id="header">
{% block header %}
"""
    standard = generateHeader(standard,properties)
    standard += """{% endblock %}
</div>
<!-- End Header -->

<!-- Menu -->
<div id="menu">
{% block menu %}
"""
    standard = generateMenu(standard,properties)

    standard += """{% endblock %}
</div>
<!-- End Menu -->

<!-- Content -->
<div id="content">
{% block content %}
{% endblock %}
</div>
<!-- End Content -->

<!-- Footer -->
<div id="footer">
{% block footer  %}
"""
    standard = generateFooter(standard, properties)
    standard += """{% endblock %}
</div>
<!-- End Footer -->


{% endblock %}
<!-- End Body -->
"""

    #location of main app is used a lot
    consts.MAIN = os.path.join(consts.PROJECT, 'main')

    #write the new standard.html
    with open(os.path.join(consts.MAIN, 'templates', 'standard.html'), 'w') as f:
        standard = f.write(standard)    


    try:
        for page in iter(properties["pages"]):
            generatePage("main", page, consts.MAIN, properties["pages"][page])
    except KeyError:
        print "No web pages to write"

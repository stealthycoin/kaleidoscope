import sys
from menu import Menu, MenuItem

def tabify(string, tabs):
    """Adds tabs before string"""
    return ("    " * tabs) + string + "\n"


def generateHeader(standard, properties):
    """Takes the standard file and adds a header to it"""
    try:
        return "%s\n<a href=\"/\"><h1>%s</h1></a>\n" % (standard, properties["website"]["prettyName"])
    except KeyError:
        return standard

def generateMenu(standard, properties):
    """Generates the menu for a given page"""
    #Checks for menu presence
    try:
        properties["menu"]
    except KeyError:
        print "No menu"
        return

    menu = Menu()
    for item in properties["menu"]:
        menu.addItem(MenuItem(properties["menu"][item]))
        
    menu.sortItems()
    return standard + menu.show()

def generateFooter(standard,properties):
    """Generate footer"""
    try:
        owner = properties["website"]["author"]
    except KeyError:
        owner = properties["website"]["name"]

    from datetime import date
    return "%s&copy; %d %s" % (standard, date.today().year, owner)

def generatePage(app, name, path, appPath, properties):
    """
    Generate a page given a dict of properties
    
    A page consists of both a view and a template both are generated by this function.
    """

    #basics for each page
    tabs = 0
    page = "<!-- Generated code for page: " + name + " -->\n" 
    page += tabify("{% extends \"standard.html\" %}", tabs)

    
    #Generate unique portion for each page
    try:
        page += tabify(("{%% block title %%}%s{%% endblock %%}" % properties["title"]), tabs)
    except KeyError:
        pass #no title for page


    try:
        with open(path+"/"+properties["template"]) as f:
            page += "{% block content %}" + f.read() + "{% endblock %}"
    except KeyError:
        print "Page " + name + " has no content"
    except IOError:
        print "No such file: " + path + "/" + properties["content"]
        sys.exit(7)

    with open(appPath+"/templates/"+name+".html", "w") as f:
        f.write(page)
        
    tabs = 0
    #write view
    view = tabify("def %s(request):" % name, tabs)
    tabs += 1
    view += tabify("return render(request,\"%s.html\",{})" % name, tabs)
    with open(appPath+"/views.py", "a") as f:
        f.write("\n\n" + view)


    #return a mapping from the url to the view
    return "    url(r'^%s$', '%s.views.%s', name='%s')," % (properties["url"],app,name,name)
    
def createPages(path,properties):
    """Iterate through and create pages"""
    #url mappings variable
    urls = []


    #read standard.html file
    standard = """{% extends "base.html" %}

<!-- Body -->
{% block body %}


<!-- Header -->
<div id="header">
{% block header %}
"""
    standard = generateHeader(standard,properties)
    standard += """{% endblock %}
</div>
<!-- End Header -->

<!-- Menu -->
<div id="menu">
{% block menu %}
"""
    standard = generateMenu(standard,properties)

    standard += """{% endblock %}
</div>
<!-- End Menu -->

<!-- Content -->
<div id="content">
{% block content %}
{% endblock %}
</div>
<!-- End Content -->

<!-- Footer -->
<div id="footer">
{% block footer  %}
"""
    standard = generateFooter(standard, properties)
    standard += """{% endblock %}
</div>
<!-- End Footer -->


{% endblock %}
<!-- End Body -->
"""

    #write the new standard.html
    with open(path+"/"+properties["website"]["name"]+"/main/templates/standard.html", "w") as f:
        standard = f.write(standard)    



    #start with main app
    mainPath = path+"/"+properties["website"]["name"]+"/main/"

    try:
        for page in iter(properties["pages"]):
            urls.append(generatePage("main", page, path, mainPath, properties["pages"][page]))
    except KeyError:
        print "No web pages to write"



    #create urls file
    content = ""
    with open(path+"/"+properties["website"]["name"]+"/"+properties["website"]["name"]+"/urls.py", "r") as f:
        content = f.read().split("\n")

    #find beginning of url mapping
    mark = 1
    for line in content:
        if line.startswith("urlpatterns"):
            break
        mark += 1
    #splice in our urls
    content = content[0:mark] + urls + content[mark:]

    #re-write the file
    with open(path+"/"+properties["website"]["name"]+"/"+properties["website"]["name"]+"/urls.py", "w") as f:
        f.write("\n".join(content))

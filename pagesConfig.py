from menu import Menu, MenuItem

def tabify(string, tabs):
    """Adds tabs before string"""
    return ("    " * tabs) + string + "\n"


def generateMenu(path, properties):
    """Generates the menu for a given page"""
    #Checks for menu presence
    try:
        properties["menu"]
    except KeyError:
        print "No menu"
        return

    path += "/"+properties["website"]["name"]+"/main/templates/standard.html"

    menu = Menu() #create the menu
    for item in properties["menu"]:
        menu.addItem(MenuItem(properties["menu"][item]))
        
    menu.sortItems()

    #read standard file
    lines = []
    with open(path, "r") as f:
        lines = f.read().split("\n")

    #find the menu tags
    mark = 1
    for line in lines:
        if "block menu" in line:
            break
        mark += 1
        
    lines = lines[:mark] + menu.show().split("\n") + lines[mark:]

    #write standard file back
    with open(path, "w") as f:
        f.write("\n".join(lines))

def generatePage(app, name, path, properties):
    """
    Generate a page given a dict of properties
    
    A page consists of both a view and a template both are generated by this function.
    """

    #basics for each page
    tabs = 0
    page = "<!-- Generated code for page: " + name + " -->\n" 
    page += tabify("{% extends \"standard.html\" %}", tabs)

    
    #Generate unique portion for each page
    try:
        page += tabify(("{%% block title %%}%s{%% endblock %%}" % properties["title"]), tabs)
    except KeyError:
        pass #no title for page


    with open(path+"/templates/"+name+".html", "w") as f:
        f.write(page)
        
    tabs = 0
    #write view
    view = tabify("def %s(request):" % name, tabs)
    tabs += 1
    view += tabify("return render(request,\"%s.html\",{})" % name, tabs)
    with open(path+"/views.py", "a") as f:
        f.write("\n\n" + view)


    #return a mapping from the url to the view
    return "    url(r'^%s$', '%s.views.%s', name='%s')," % (properties["url"],app,name,name)
    
def createPages(path,properties):
    """Iterate through and create pages"""
    #url mappings variable
    urls = []

    #create a menu in the standard.html file
    generateMenu(path,properties)
    

    #start with main app
    mainPath = path+"/"+properties["website"]["name"]+"/main/"

    try:
        for page in iter(properties["pages"]):
            urls.append(generatePage("main", page, mainPath, properties["pages"][page]))
    except KeyError:
        print "No web pages to write"

    #create urls file
    content = ""
    with open(path+"/"+properties["website"]["name"]+"/"+properties["website"]["name"]+"/urls.py", "r") as f:
        content = f.read().split("\n")

    #find beginning of url mapping
    mark = 1
    for line in content:
        if line.startswith("urlpatterns"):
            break
        mark += 1
    #splice in our urls
    content = content[0:mark] + urls + content[mark:]

    #re-write the file
    with open(path+"/"+properties["website"]["name"]+"/"+properties["website"]["name"]+"/urls.py", "w") as f:
        f.write("\n".join(content))
